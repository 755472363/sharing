package com.hyk.arithmetic.top101;

/**
 * BM81 买卖股票的最好时机(二)
 */
public class Solution_BM81_买卖股票的最好时机_2 {

    /**
     * 描述
     * 假设你有一个数组prices，长度为n，其中prices[i]是某只股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益
     * 1. 你可以多次买卖该只股票，但是再次购买前必须卖出之前的股票
     * 2. 如果不能获取收益，请返回0
     * 3. 假设买入卖出均无手续费
     *
     * 数据范围： 1 ≤ n ≤ 10^5，1 ≤ prices[i] ≤ 10^4
     * 要求：空间复杂度 O(n)，时间复杂度 O(n)
     * 进阶：空间复杂度 O(1)，时间复杂度 O(n)
     *
     * 示例1
     * 输入：[8,9,2,5,4,7,1]
     * 返回值：7
     * 说明：
     * 在第1天(股票价格=8)买入，第2天(股票价格=9)卖出，获利9-8=1
     * 在第3天(股票价格=2)买入，第4天(股票价格=5)卖出，获利5-2=3
     * 在第5天(股票价格=4)买入，第6天(股票价格=7)卖出，获利7-4=3
     * 总获利1+3+3=7，返回7
     *
     * 示例3
     * 输入：[1,2,3,4,5]
     * 返回值：4
     * 说明：第一天买进，最后一天卖出最优。中间的当天买进当天卖出不影响最终结果。最大收益为4。
     */


    /**
     * 贪心（扩展思路）
     * 知识点：贪心思想
     * 贪心思想属于动态规划思想中的一种，其基本原理是找出整体当中给的每个局部子结构的最优解，
     * 并且最终将所有的这些局部最优解结合起来形成整体上的一个最优解。
     *
     * 思路：
     * 其实我们要想获取最大收益，只需要在低价买入高价卖出就可以了，因为可以买卖多次。
     * 利用贪心思想：只要一段区间内价格是递增的，那么这段区间的差值就是我们可以有的收益。
     *
     * 具体做法：
     * step 1：遍历数组，只要数组后一个比前一个更大，就可以有收益。
     * step 2：将收益累加，得到最终结果。
     */

    /**
     * {8, 9, 2, 5, 4, 7, 1};
     * 就是求数组从左到右，正向所有差值和(每次都是抄底，高点卖出，所有正向波段和)
     * 空间复杂度 O(1)，时间复杂度 O(n)
     */
    public int maxProfit(int[] prices) {
        if (prices.length <= 1) return 0;
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] > prices[i - 1])
                max += prices[i] - prices[i - 1];
        }
        return max;
    }

    /**
     *
     */
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int res1 = new Solution_BM81_买卖股票的最好时机_2().maxProfit(arr);
        // 4
        System.out.println("res1 = " + res1);

        int[] arr2 = {8, 9, 2, 5, 4, 7, 1};
        int res2 = new Solution_BM81_买卖股票的最好时机_2().maxProfit(arr2);
        // 7
        System.out.println("res2 = " + res2);
    }

}



